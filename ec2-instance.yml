AWSTemplateFormatVersion: "2010-09-09"
Description: >
  EC2 instance with Security Group and SSM access (Amazon Linux 2023).
  Assumes an existing VPC and Subnet. Installs HTTPD and serves a sample page.
  Creates IAM Role + Instance Profile for SSM. Outputs Instance details.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network"
        Parameters:
          - VpcId
          - SubnetId
          - AssociatePublicIp
          - SSHLocation
      - Label:
          default: "Compute"
        Parameters:
          - InstanceType
          - KeyName
          - RootVolumeSizeGiB
      - Label:
          default: "AMI"
        Parameters:
          - LatestAmiId
      - Label:
          default: "Tags"
        Parameters:
          - Environment
          - NameTag
    ParameterLabels:
      VpcId:
        default: "VPC ID"
      SubnetId:
        default: "Subnet ID"
      AssociatePublicIp:
        default: "Associate Public IP"
      SSHLocation:
        default: "SSH CIDR (22/tcp)"
      InstanceType:
        default: "EC2 Instance Type"
      KeyName:
        default: "EC2 Key Pair Name"
      RootVolumeSizeGiB:
        default: "Root Volume Size (GiB)"
      LatestAmiId:
        default: "AMI ID (via SSM Parameter)"
      Environment:
        default: "Environment Tag"
      NameTag:
        default: "Name Tag"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to launch the instance in.
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet to launch the instance in (use a public subnet if AssociatePublicIp is true).
  AssociatePublicIp:
    Type: String
    Description: Whether to associate a public IP with the instance network interface.
    AllowedValues: ["true", "false"]
    Default: "true"
  SSHLocation:
    Type: String
    Description: CIDR permitted to SSH to the instance (e.g., 203.0.113.0/24). Use 0.0.0.0/0 for open access.
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR of the form x.x.x.x/x
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t4g.micro
      - t4g.small
      - t4g.medium
      - t4g.large
      - m6i.large
      - m7i.large
      - c7i.large
    Description: EC2 instance type.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH.
  RootVolumeSizeGiB:
    Type: Number
    Default: 16
    MinValue: 8
    MaxValue: 1024
    Description: Size of the root EBS volume (GiB).
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
    Description: >
      SSM Parameter for the latest Amazon Linux 2023 AMI. Use arm64 if choosing t4g.*:
      /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64

  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, test, stage, prod]
    Description: Tag value for Environment.
  NameTag:
    Type: String
    Default: ec2-web
    Description: Name tag for the EC2 instance.

Conditions:
  IsPublic: !Equals [!Ref AssociatePublicIp, "true"]

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH (22) and HTTP (80)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound
      Tags:
        - Key: Name
          Value: !Ref NameTag
        - Key: Environment
          Value: !Ref Environment

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "${NameTag}-role"
        - Key: Environment
          Value: !Ref Environment

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref SubnetId
          GroupSet:
            - !Ref InstanceSecurityGroup
          AssociatePublicIpAddress: !If [IsPublic, true, false]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref RootVolumeSizeGiB
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euxo pipefail
          dnf -y update
          dnf -y install httpd
          cat > /var/www/html/index.html << 'EOF'
          <!doctype html>
          <html>
          <head><meta charset="utf-8"><title>EC2 up</title></head>
          <body style="font-family: sans-serif">
            <h1>It works!</h1>
            <p>Instance: ${AWS::StackName}</p>
            <p>Hostname: $(hostname)</p>
            <p>AZ: $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)</p>
          </body>
          </html>
          EOF
          systemctl enable --now httpd
      Tags:
        - Key: Name
          Value: !Ref NameTag
        - Key: Environment
          Value: !Ref Environment

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref EC2Instance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  InstancePublicIP:
    Condition: IsPublic
    Description: Public IP address
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"

  InstancePublicDNS:
    Condition: IsPublic
    Description: Public DNS name
    Value: !GetAtt EC2Instance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-PublicDNS"

  SecurityGroupId:
    Description: Security Group ID
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SGId"

  AvailabilityZone:
    Description: Availability Zone
    Value: !GetAtt EC2Instance.AvailabilityZone